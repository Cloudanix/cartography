{
  "statements": [
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(n:GCPInstance) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete GCP Instances that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:GCPInstance)<-[r:RESOURCE]-(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})<-[:OWNER]-(:CloudanixWorkspace{id: {WORKSPACE_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Instance-to-Project relationships that are out of date."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPInstance)-[:NETWORK_INTERFACE]->(n:GCPNetworkInterface) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Network Interfaces and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPInstance)-[r:NETWORK_INTERFACE]-(:GCPNetworkInterface) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Instance-to-NetworkInterface relationships that are out of date."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPVpc)-[:RESOURCE]->(n:GCPSubnet) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Subnets that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPInstance)-[:TAGGED]->(n:GCPNetworkTag) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Network Tags that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPInstance)-[r:TAGGED]-(:GCPNetworkTag) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Instance-to-Tag relationships that are out of date."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {WORKSPACE_ACCOUNT_ID}})-[:RESOURCE]->(:GCPVpc)-[r:DEFINED_IN]->(:GCPNetworkTag) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP VPC-to-Tag relationships that are out of date."
    }
  ],
  "name": "cleanup GCP Instances"
}
