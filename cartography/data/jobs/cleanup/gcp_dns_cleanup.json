{
  "statements": [
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {GCP_PROJECT_ID}})-[:RESOURCE]->(n:GCPDNSZone) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete GCP DNS Zones that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:GCPDNSZone)<-[r:RESOURCE]-(:GCPProject{accountid: {GCP_PROJECT_ID}})<-[:OWNER]-(:CloudanixWorkspace{id: {WORKSPACE_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP GCPDNSZone-to-Project relationships that are out of date."
    },
    {
      "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPDNSZone)-[:HAS_RECORD]->(n:GCPRecordSet) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete GCP DNS Record Sets that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:GCPRecordSet)<-[r:HAS_RECORD]-(:GCPDNSZone)<-[:RESOURCE]-(:GCPProject{accountid: {GCP_PROJECT_ID}})<-[:OWNER]-(:CloudanixWorkspace{id: {WORKSPACE_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP GCPDNSZone-to-GCPRecordSet relationships that are out of date."
    }
  ],
  "name": "Cleanup GCP DNS Records and RecordSets"
}
