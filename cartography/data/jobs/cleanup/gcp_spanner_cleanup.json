{
	"statements": [
		{
			"query": "MATCH (n:GCPSpannerInstanceConfigReplica)<-[:HAS]-(:GCPSpannerInstanceConfig)<-[:HAS]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Spanner InstanceConfig's replica that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPSpannerInstanceConfigReplica)<-[r:HAS]-(:GCPSpannerInstanceConfig)<-[:HAS]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP SpannerInstanceConfigReplica-to-SpannerInstanceConfig relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPSpannerInstanceConfig)<-[:HAS]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Spanner InstanceConfig that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPSpannerInstanceConfig)<-[r:HAS]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP SpannerInstanceConfig-to-SpannerInstance relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPSpannerInstanceBackup)<-[:HAS_BACKUP]-(:GCPSpannerInstanceDatabase)<-[:HAS_DATABASE]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Spanner Instance Backup that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPSpannerInstanceBackup)<-[r:HAS_BACKUP]-(:GCPSpannerInstanceDatabase)<-[r:HAS_DATABASE]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP SpannerInstanceBackup-to-SpannerInstanceDatabase relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPSpannerInstanceDatabase)<-[:HAS_DATABASE]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Spanner Instance Database that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPSpannerInstanceDatabase)<-[r:HAS_DATABASE]-(:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP SpannerInstanceDatabase-to-SpannerInstance relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPSpannerInstance)<-[:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Spanner Instance that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPSpannerInstance)<-[r:RESOURCE]-(:GCPProject{id: $GCP_PROJECT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP SpannerInstance-to-GCPProject relationships that are out of date."
		}
	],
	"name": "Cleanup GCP Spanner Instances, InstanceConfig, Backups & Databases"
}
