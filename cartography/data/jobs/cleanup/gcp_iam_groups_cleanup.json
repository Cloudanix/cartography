{
    "statements": [
        {
            "query": "MATCH (:GCPCustomer)-[:HAS_GROUP]->(n:GCPGroup) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP IAM Groups that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:GCPCustomer)-[r:HAS_GROUP]->(:GCPGroups) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP Customer to IAM Groups relationships that are out of date"
        },
        {
            "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {GCP_PROJECT_ID}})-[:RESOURCE]->(n:GCPGroup) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP IAM Groups that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:CloudanixWorkspace{id: {WORKSPACE_ID}})-[:OWNER]->(:GCPProject{accountid: {GCP_PROJECT_ID}})-[r:RESOURCE]->(:GCPGroup) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP Project to IAM Groups relationships that are out of date"
        }
    ],
    "name": "cleanup GCP IAM Groups"
}