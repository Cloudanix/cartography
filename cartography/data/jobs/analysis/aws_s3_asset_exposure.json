{
	"statements": [
		{
			"query": "MATCH (bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WITH bucket LIMIT $LIMIT_SIZE REMOVE bucket.anonymous_access_type,bucket.anonymous_actions,bucket.anonymous_access return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (bucket:S3Bucket{is_public: true})<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) SET bucket.anonymous_access = true,(CASE WHEN NOT 'policy' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'policy';",
			"iterative": false
		},
		{
			"query": "MATCH (acl:S3Acl)-[:APPLIES_TO]->(bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})\nWHERE acl.uri IN ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers'] AND acl.permission = 'READ'\nSET bucket.anonymous_access = true, bucket.anonymous_actions = coalesce(bucket.anonymous_actions, []) + ['s3:ListBucket', 's3:ListBucketVersions', 's3:ListBucketMultipartUploads'],(CASE WHEN NOT 'acl' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'acl';",
			"iterative": false
		},
		{
			"query": "MATCH (acl:S3Acl)-[:APPLIES_TO]->(bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})\nWHERE acl.uri IN ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers'] AND acl.permission = 'WRITE'\nAND (acl.ownerid = acl.granteeid)\nSET bucket.anonymous_access = true, bucket.anonymous_actions = coalesce(bucket.anonymous_actions, []) + ['s3:DeleteObjectVersion'],(CASE WHEN NOT 'acl' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'acl';",
			"iterative": false
		},
		{
			"query": "MATCH (acl:S3Acl)-[:APPLIES_TO]->(bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})\nWHERE acl.uri IN ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers'] AND acl.permission = 'READ_ACP'\nSET bucket.anonymous_access = true, bucket.anonymous_actions = coalesce(bucket.anonymous_actions, []) + ['s3:DeleteObjectVersion'],(CASE WHEN NOT 'acl' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'acl';",
			"iterative": false
		},
		{
			"query": "MATCH (acl:S3Acl)-[:APPLIES_TO]->(bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})\nWHERE acl.uri IN ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers'] AND acl.permission = 'WRITE_ACP'\nSET bucket.anonymous_access = true, bucket.anonymous_actions = coalesce(bucket.anonymous_actions, []) + ['s3:PutBucketAcl'],(CASE WHEN NOT 'acl' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'acl';",
			"iterative": false
		},
		{
			"query": "MATCH (acl:S3Acl)-[:APPLIES_TO]->(bucket:S3Bucket)<-[:RESOURCE]-(aws:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})\nWHERE acl.uri IN ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers'] AND acl.permission = 'FULL_CONTROL'\nSET bucket.anonymous_access = true, bucket.anonymous_actions = coalesce(bucket.anonymous_actions, []) + ['s3:ListBucket', 's3:ListBucketVersions', 's3:ListBucketMultipartUploads', 's3:PutObject', 's3:DeleteObject', 's3:DeleteObjectVersion', 's3:PutBucketAcl'],(CASE WHEN NOT 'acl' IN  coalesce(bucket.anonymous_access_type , []) THEN bucket END).anonymous_access_type = coalesce(bucket.anonymous_access_type , []) + 'acl';",
			"iterative": false
		}
	],
	"name": "AWS S3 policies public exposure"
}