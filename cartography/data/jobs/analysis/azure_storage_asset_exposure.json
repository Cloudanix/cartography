{
    "statements": [
        {
            "query": "MATCH ((n:AzureStorageBlobContainer)<-[:CONTAINS]-(:AzureStorageBlobService)<-[:USES]-(:AzureStorageAccount)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.anonymous_access) WITH n LIMIT $LIMIT_SIZE REMOVE n.anonymous_access, n.anonymous_access_type RETURN COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100
        },
        {
            "query": "MATCH ((n:AzureStorageAccount)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100
        },
        {
            "query":"MATCH (bc:AzureStorageBlobContainer{publicaccess: 'container'})<-[:CONTAINS]-(:AzureStorageBlobService)<-[:USES]-(:AzureStorageAccount)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WITH bc WHERE (NOT EXISTS(bc.anonymous_access_type)) OR (NOT 'public_container' IN bc.anonymous_access_type) SET bc.anonymous_access = true, bc.anonymous_access_type = coalesce(bc.anonymous_access_type , []) + 'public_container';",
            "iterative": true,
            "iterationsize": 100
        },
        {
            "query": "MATCH (bc:AzureStorageBlobContainer)<-[:CONTAINS]-(:AzureStorageBlobService)<-[:USES]-(:AzureStorageAccount{allowBlobPublicAccess: true})<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WITH bc WHERE (NOT EXISTS(bc.anonymous_access_type)) OR (NOT 'public_blob_container' IN bc.anonymous_access_type) SET bc.anonymous_access = true, bc.anonymous_access_type = coalesce(bc.anonymous_access_type , []) + 'public_blob_container';",
            "iterative": true,
            "iterationsize": 100
        },
        {
            "query": "MATCH (sa:AzureStorageAccount{networkRuleDefaultAction: 'Allow'})<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WITH sa WHERE (NOT EXISTS(sa.exposed_internet_type)) OR (NOT 'default_allow_action' IN sa.exposed_internet_type) SET sa.exposed_internet = true, sa.exposed_internet_type = coalesce(sa.exposed_internet_type , []) + 'default_allow_action';",
            "iterative": true,
            "iterationsize": 100
        }
    ],
    "name": "Azure storage asset internet exposure"
}