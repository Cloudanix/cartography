{
	"statements": [
		{
			"query": "MATCH ((n:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH ((n:AzureKeyVaultKey)<-[:HAS_KEY]-(:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH ((n:AzureKeyVaultSecret)<-[:HAS_SECRET]-(:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH ((n:AzureKeyVaultCertificate)<-[:HAS_CERTIFICATE]-(:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (kv:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE kv.network_acl_default_action = 'Allow' OR kv.network_acl_default_action IS NULL SET kv.exposed_internet = true, (CASE WHEN NOT 'default_network_access' IN  coalesce(kv.exposed_internet_type , []) THEN kv END).exposed_internet_type = coalesce(kv.exposed_internet_type , []) + 'default_network_access';",
			"iterative": false
		},
		{
			"query": "MATCH (k:AzureKeyVaultKey)<-[:HAS_KEY]-(kv:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE kv.network_acl_default_action = 'Allow' OR kv.network_acl_default_action IS NULL SET k.exposed_internet = true, (CASE WHEN NOT 'default_network_access' IN  coalesce(k.exposed_internet_type , []) THEN k END).exposed_internet_type = coalesce(k.exposed_internet_type , []) + 'default_network_access';",
			"iterative": false
		},
		{
			"query": "MATCH (s:AzureKeyVaultSecret)<-[:HAS_SECRET]-(kv:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE kv.network_acl_default_action = 'Allow' OR kv.network_acl_default_action IS NULL SET s.exposed_internet = true, (CASE WHEN NOT 'default_network_access' IN  coalesce(s.exposed_internet_type , []) THEN s END).exposed_internet_type = coalesce(s.exposed_internet_type , []) + 'default_network_access';",
			"iterative": false
		},
		{
			"query": "MATCH (c:AzureKeyVaultCertificate)<-[:HAS_CERTIFICATE]-(kv:AzureKeyVault)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE kv.network_acl_default_action = 'Allow' OR kv.network_acl_default_action IS NULL SET c.exposed_internet = true, (CASE WHEN NOT 'default_network_access' IN  coalesce(c.exposed_internet_type , []) THEN c END).exposed_internet_type = coalesce(c.exposed_internet_type , []) + 'default_network_access';",
			"iterative": false
		}
	],
	"name": "Azure keyvault asset internet exposure"
}
