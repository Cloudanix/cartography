{
	"statements": [
		{
			"query": "MATCH ((n:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) WHERE EXISTS(n.exposed_internet) WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type RETURN COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule)<-[:CONTAIN]-(group:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(interface:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.access='Allow' AND rule.source_port_range='*' OR rule.protocol='*' OR rule.source_address_prefix='0.0.0.0/0' SET vm.exposed_internet = true, (CASE WHEN NOT 'direct_ipv4' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'direct_ipv4';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule)<-[:CONTAIN]-(group:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkSubnet)<-[:SUBNET]-(interface:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.access='Allow' AND rule.source_port_range='*' OR rule.protocol='*' OR rule.source_address_prefix='0.0.0.0/0' SET vm.exposed_internet = true, (CASE WHEN NOT 'public_interface_subnet' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_interface_subnet';",
			"iterative": false
		},
		{
			"query": "MATCH (:AzureNetworkLoadBalancer{type: 'public'})-[:HAS]->(:AzureLoadBalancerBackendAddressPool)-[:HAS]->(:AzureNetworkInterfaceIPConfiguration)<-[:CONTAIN]-(interface:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) SET vm.exposed_internet = true, (CASE WHEN NOT 'public_load_balancer' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_load_balancer';",
			"iterative": false
		},
		{
			"query": "MATCH (:AzurePublicIPAddress)<-[:MEMBER_PUBLIC_IP_ADDRESS]-(interface:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) SET vm.exposed_internet = true, (CASE WHEN NOT 'public_ip' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_ip';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.destination_port_range IN ['0-65535', '80-8080', '111-32800'] OR '0-65535' IN rule.destination_port_ranges OR '80-8080' IN rule.destination_port_ranges OR '111-32800' IN rule.destination_port_ranges SET vm.exposed_internet = true, (CASE WHEN NOT 'inbound_public_ports' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'inbound_public_ports';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'TCP',  destination_port_range: '445'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_cifs' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_cifs';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', destination_port_range: '53'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_dns' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_dns';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'TCP'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.destination_port_range in ['21', '20'] AND rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_ftp' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_ftp';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'TCP',  destination_port_range: '80'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_http' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_http';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'ICMP'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_icmp' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_icmp';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'TCP',  destination_port_range: '22'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_ssh' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_ssh';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'TCP',  destination_port_range: '23'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_telnet' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_telnet';",
			"iterative": false
		},
		{
			"query": "MATCH (rule:AzureNetworkSecurityRule{direction: 'Inbound', access: 'Allow', protocol: 'UDP'})<-[:CONTAIN]-(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) WHERE rule.source_address_prefix IN ['*', 'Any', 'Internet'] SET vm.exposed_internet = true, (CASE WHEN NOT 'public_udp' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_udp';",
			"iterative": false
		},
		{
			"query": "MATCH (:AzureNetworkRoute{address_prefix: '0.0.0.0/0', next_hop_type:'Internet'})<-[:CONTAIN]-(:AzureRouteTable)<-[:CONTAIN]-(group:AzureNetworkSubnet)-[:MEMBER_NETWORK_SECURITY_GROUP]->(:AzureNetworkSecurityGroup)<-[:MEMBER_NETWORK_SECURITY_GROUP]-(:AzureNetworkInterface)<-[:MEMBER_NETWORK_INTERFACE]-(vm:AzureVirtualMachine)<-[:RESOURCE]-(:AzureSubscription{id: $AZURE_SUBSCRIPTION_ID})<-[:RESOURCE]-(:AzureTenant{id: $AZURE_TENANT_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) SET vm.exposed_internet = true, (CASE WHEN NOT 'public_subnet' IN  coalesce(vm.exposed_internet_type , []) THEN vm END).exposed_internet_type = coalesce(vm.exposed_internet_type , []) + 'public_subnet';",
			"iterative": false
		}
	],
	"name": "Azure virtual machines asset internet exposure"
}
