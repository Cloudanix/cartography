{
	"statements": [
		{
			"query": "MATCH ((n)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID})) where EXISTS(n.exposed_internet) AND labels(n) IN ['LoadBalancer', 'LoadBalancerV2'] WITH n LIMIT $LIMIT_SIZE REMOVE n.exposed_internet, n.exposed_internet_type return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (cidr:Ipv6Range{range:'::/0'})—[:MEMBER_OF_IP_RULE]->(perm:IpPermissionInbound)—[:MEMBER_OF_EC2_SECURITY_GROUP]->(sg:EC2SecurityGroup)<-[:MEMBER_OF_EC2_SECURITY_GROUP]-(elbv2:LoadBalancerV2{scheme: 'internet-facing'})—[:ELBV2_LISTENER]->(listener:ELBV2Listener)\nWHERE (sg)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) AND listener.port>=perm.fromport AND listener.port<=perm.toport\nSET elbv2.exposed_internet = true",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (cidr:IpRange{range:'0.0.0.0/0'})—[:MEMBER_OF_IP_RULE]->(perm:IpPermissionInbound)—[:MEMBER_OF_EC2_SECURITY_GROUP]->(sg:EC2SecurityGroup)<-[:MEMBER_OF_EC2_SECURITY_GROUP]-(elbv2:LoadBalancerV2{scheme: 'internet-facing'})—[:ELBV2_LISTENER]->(listener:ELBV2Listener)\nWHERE (sg)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) AND listener.port>=perm.fromport AND listener.port<=perm.toport\nSET elbv2.exposed_internet = true",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (cidr:IpRange{range:'0.0.0.0/0'})—[:MEMBER_OF_IP_RULE]->(perm:IpPermissionInbound)—[:MEMBER_OF_EC2_SECURITY_GROUP]->(sg:EC2SecurityGroup)<-[:SOURCE_SECURITY_GROUP]-(elb:LoadBalancer{scheme: 'internet-facing'})—[:ELB_LISTENER]->(listener:ELBListener)\nWHERE (sg)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) AND listener.port>=perm.fromport AND listener.port<=perm.toport\nSET elb.exposed_internet = true",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (cidr:Ipv6Range{range:'::/0'})—[:MEMBER_OF_IP_RULE]->(perm:IpPermissionInbound)—[:MEMBER_OF_EC2_SECURITY_GROUP]->(sg:EC2SecurityGroup)<-[:SOURCE_SECURITY_GROUP]-(elb:LoadBalancer{scheme: 'internet-facing'})—[:ELB_LISTENER]->(listener:ELBListener)\nWHERE (sg)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) AND listener.port>=perm.fromport AND listener.port<=perm.toport\nSET elb.exposed_internet = true",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (elbv2:LoadBalancerV2{scheme: 'internet-facing'})<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) with elbv2 WHERE (NOT EXISTS(elbv2.exposed_internet_type)) OR (NOT 'scheme' IN elbv2.exposed_internet_type) SET elbv2.exposed_internet = true, elbv2.exposed_internet_type = coalesce(elbv2.exposed_internet_type, []) + 'scheme'",
			"iterative": true,
			"iterationsize": 100
		},
		{
			"query": "MATCH (elb:LoadBalancer{scheme: 'internet-facing'})<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID})<-[:OWNER]-(:CloudanixWorkspace{id: $WORKSPACE_ID}) with elb WHERE (NOT EXISTS(elb.exposed_internet_type)) OR (NOT 'scheme' IN elb.exposed_internet_type) SET elb.exposed_internet = true, elb.exposed_internet_type = coalesce(elb.exposed_internet_type, []) + 'scheme'",
			"iterative": true,
			"iterationsize": 100
		}
	],
	"name": "AWS ec2 elb internet exposure"
}
